schema {
    query: Query
    mutation: Mutation
}

interface Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
}

interface Q {
    Member(member_id: Int!): MemberResponse
    Members: MembersResponse
    Guild(guild_id: Int!): GuildResponse
    Guilds: GuildsResponse
    PurgeList: PurgeResponse
}

interface M {
    CreateGuild(guild_id: Snowflake!, name: String!): GuildResponse!
    UpdateGuild(guild_id: Snowflake!, name: String, last_activity: ActivityInput, idle_stats: IdleInput, status: STATUS, settings: SettingsInput): GuildResponse!
    DeleteGuild(guild_id: Snowflake!): DeleteResponse!
    CreateMember(guild_id: Snowflake!, member_id: Snowflake!, username: String!, nickname: String): MemberResponse!
    UpdateMember(member_id: Snowflake!, nickname: String, last_activity: ActivityInput, idle_stats: IdleInput, status: STATUS): MemberResponse!
    DeleteMember(member_id: Snowflake!): DeleteResponse!
    AddToPurgeList(member_id: Snowflake!, guild_id: Snowflake!): PurgeResponse!
    RemoveFromPurgeList(guild_id: Snowflake!): DeleteResponse!
}

enum ACTIVITY {
    CHAT
    VOICE
    STREAMING
}

enum STATUS {
    ACTIVE
    INACTIVE
}

scalar DateTime
scalar Snowflake
scalar Error
scalar Seconds
scalar DatabaseId

type Activity {
    location: Snowflake!
    type: ACTIVITY!
    timestamp: DateTime!
}

input ActivityInput {
    location: Snowflake!
    type: ACTIVITY!
    timestamp: DateTime!
}

type IdleStats {
    times_idle: [Seconds]
    avg_idle_time: Seconds
    previous_avgs: [Seconds]
}

input IdleInput {
    times_idle: [Seconds]
    avg_idle_time: Seconds
    previous_avgs: [Seconds]
}

type MemberObject {
    id: DatabaseId!
    member_id: Snowflake!
    username: String!
    nickname: String
    last_activity: Activity
    idle_stats: IdleStats
    status: STATUS!
    date_added: DateTime!
}

type SettingsObject {
    kick_inactive_members: Boolean!
    time_before_inactive: [Int]!
}

input SettingsInput {
    kick_inactive_members: Boolean
    time_before_inactive: [Int]
}

type GuildObject {
    id: DatabaseId!
    guild_id: Snowflake!
    name: String!
    last_activity: Activity
    idle_stats: IdleStats
    status: STATUS!
    settings: SettingsObject!
    members: [MemberObject]!
    date_added: DateTime
}

type PurgeListObject {
    member_id: Snowflake!
    guild_id: Snowflake!
}

type GuildResponse implements Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
    guild(guild_id: Snowflake!): GuildObject
}

type GuildsResponse implements Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
    guilds: [GuildObject]
}

type MemberResponse implements Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
    member(member_id: Snowflake): MemberObject
}

type MembersResponse implements Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
    members: [MemberObject]
}

type PurgeResponse implements Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
    purgeList: PurgeListObject
}

type DeleteResponse implements Response {
    code: String!
    success: Boolean!
    message: String
    errors: [Error]
}

type Query implements Q {
    Guild(guild_id: Snowflake!): GuildResponse
    Guilds: GuildsResponse
    Member(member_id: Snowflake!): MemberResponse
    Members: MembersResponse
    PurgeList: PurgeResponse
}

type Mutation implements M {
    CreateGuild(guild_id: Snowflake!, name: String!): GuildResponse!
    UpdateGuild(guild_id: Snowflake!, name: String, last_activity: ActivityInput, idle_stats: IdleInput, status: STATUS, settings: SettingsInput): GuildResponse!
    DeleteGuild(guild_id: Snowflake!): DeleteResponse!
    CreateMember(guild_id: Snowflake!, member_id: Snowflake!, username: String!, nickname: String): MemberResponse!
    UpdateMember(member_id: Snowflake!, nickname: String, last_activity: ActivityInput, idle_stats: IdleInput, status: STATUS): MemberResponse!
    DeleteMember(member_id: Snowflake!): DeleteResponse!
    AddToPurgeList(member_id: Snowflake!, guild_id: Snowflake!): PurgeResponse!
    RemoveFromPurgeList(guild_id: Snowflake!): DeleteResponse!
}
